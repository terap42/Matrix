import { Component, OnInit, OnDestroy } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { Subscription } from 'rxjs';
import { MissionService, MissionDetail } from '../../services/mission.service';

@Component({
  selector: 'app-mission-details',
  templateUrl: './mission-details.page.html',
  styleUrls: ['./mission-details.page.scss'],
  standalone: false,
})
export class MissionDetailsPage implements OnInit, OnDestroy {
  mission: MissionDetail | null = null;
  missionId: string = '';
  loading: boolean = true;
  error: string = '';
  showFullDescription: boolean = false;

  private subscriptions: Subscription = new Subscription();

  constructor(
    private route: ActivatedRoute,
    private router: Router,
    private missionService: MissionService
  ) {}

  ngOnInit() {
    console.log('MissionDetailsPage loaded');
    this.route.params.subscribe(params => {
      this.missionId = params['id'];
      console.log('Mission ID:', this.missionId);
      this.loadMissionDetails();
    });
  }

  ngOnDestroy() {
    this.subscriptions.unsubscribe();
  }

  loadMissionDetails() {
    this.loading = true;
    this.error = '';

    console.log('üîç Chargement mission ID:', this.missionId);

    this.subscriptions.add(
      this.missionService.getMissionById(this.missionId).subscribe({
        next: (mission) => {
          console.log('‚úÖ Mission charg√©e:', mission);
          this.mission = mission;
          this.loading = false;
        },
        error: (error) => {
          console.error('‚ùå Erreur chargement mission:', error);
          this.error = 'Mission non trouv√©e ou erreur de chargement';
          this.loading = false;
          
          // Cr√©er une mission de fallback si l'API √©choue
          this.createFallbackMission();
        }
      })
    );
  }

  // Cr√©er une mission de fallback en cas d'erreur
  createFallbackMission() {
    console.log('üìã Cr√©ation mission fallback pour ID:', this.missionId);
    
    this.mission = {
      id: this.missionId,
      title: 'Mission en cours de chargement...',
      description: 'Cette mission est en cours de r√©cup√©ration depuis le serveur.',
      longDescription: 'Description d√©taill√©e en cours de chargement depuis l\'API. Cette mission a √©t√© r√©cemment cr√©√©e et ses d√©tails complets sont en cours de synchronisation.\n\nVeuillez rafra√Æchir la page dans quelques instants pour voir toutes les informations, ou v√©rifiez que le serveur backend est d√©marr√©.',
      category: 'D√©veloppement',
      budget: { min: 500, max: 1000 },
      deadline: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0], // 30 jours
      client: {
        id: 'fallback-client',
        name: 'Client en cours de chargement',
        avatar: 'https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=100&h=100&fit=crop&crop=face',
        rating: 4.5,
        completedProjects: 5,
        memberSince: new Date().toISOString().split('T')[0],
        verified: false
      },
      publishedAt: new Date().toISOString().split('T')[0],
      skills: ['Comp√©tences en cours de chargement'],
      requirements: [
        'Exigences en cours de r√©cup√©ration depuis l\'API',
        'Veuillez contacter le client pour plus de d√©tails',
        'V√©rifiez que le serveur backend est d√©marr√©'
      ],
      deliverables: [
        'Livrables en cours de sp√©cification',
        'D√©tails √† confirmer avec le client',
        'Informations compl√®tes disponibles via l\'API'
      ],
      applicationsCount: 0,
      status: 'open',
      isUrgent: false,
      attachments: []
    };
    
    this.loading = false;
  }

  applyToMission() {
    if (this.mission) {
      this.router.navigate(['/apply-mission', this.mission.id]);
    }
  }

  contactClient() {
    if (this.mission) {
      this.router.navigate(['/chat', this.mission.client.id]);
    }
  }

  saveToFavorites() {
    console.log('üíæ Mission sauvegard√©e en favoris:', this.mission?.id);
    // TODO: Impl√©menter la logique de sauvegarde via API
    this.showSuccessMessage('Mission ajout√©e aux favoris !');
  }

  reportMission() {
    console.log('üö® Mission signal√©e:', this.mission?.id);
    // TODO: Impl√©menter la logique de signalement via API
    this.showSuccessMessage('Mission signal√©e !');
  }

  goBack() {
    this.router.navigate(['/tabs/missions']);
  }

  formatBudget(budget: { min: number; max: number }): string {
    return `‚Ç¨${budget.min} - ‚Ç¨${budget.max}`;
  }

  formatDate(dateString: string): string {
    const date = new Date(dateString);
    return date.toLocaleDateString('fr-FR', { 
      day: '2-digit', 
      month: 'long', 
      year: 'numeric' 
    });
  }

  getTimeAgo(dateString: string): string {
    const date = new Date(dateString);
    const now = new Date();
    const diffTime = now.getTime() - date.getTime();
    const diffDays = Math.floor(diffTime / (1000 * 60 * 60 * 24));
    const diffHours = Math.floor(diffTime / (1000 * 60 * 60));
    
    if (diffDays > 0) {
      return `il y a ${diffDays} jour${diffDays > 1 ? 's' : ''}`;
    } else if (diffHours > 0) {
      return `il y a ${diffHours}h`;
    } else {
      return 'il y a quelques minutes';
    }
  }

  getDaysUntilDeadline(): number {
    if (!this.mission) return 0;
    const deadline = new Date(this.mission.deadline);
    const now = new Date();
    const days = Math.ceil((deadline.getTime() - now.getTime()) / (1000 * 60 * 60 * 24));
    return Math.max(0, days); // √âviter les valeurs n√©gatives
  }

  getUrgencyClass(): string {
    const days = this.getDaysUntilDeadline();
    if (days <= 7) return 'urgent';
    if (days <= 30) return 'soon';
    return 'normal';
  }

  getFileIcon(fileType: string): string {
    const icons = {
      'pdf': 'üìÑ',
      'figma': 'üé®',
      'doc': 'üìù',
      'xlsx': 'üìä',
      'zip': 'üì¶'
    };
    return icons[fileType as keyof typeof icons] || 'üìé';
  }

  downloadAttachment(attachment: any) {
    console.log('üì• T√©l√©chargement de:', attachment.name);
    // TODO: Impl√©menter le t√©l√©chargement r√©el via API
    window.open(attachment.url, '_blank');
  }

  toggleDescription() {
    this.showFullDescription = !this.showFullDescription;
  }

  shareMission() {
    if (navigator.share && this.mission) {
      navigator.share({
        title: this.mission.title,
        text: this.mission.description,
        url: window.location.href
      }).catch(err => {
        console.log('Erreur partage:', err);
        this.copyToClipboard();
      });
    } else {
      this.copyToClipboard();
    }
  }

  private copyToClipboard() {
    navigator.clipboard.writeText(window.location.href).then(() => {
      console.log('üîó Lien copi√© dans le presse-papiers');
      this.showSuccessMessage('Lien copi√© dans le presse-papiers !');
    }).catch(err => {
      console.error('Erreur copie:', err);
    });
  }

  private showSuccessMessage(message: string) {
    // Simple alert pour l'instant - vous pouvez utiliser un toast service plus tard
    alert(message);
  }

  // M√©thodes utilitaires pour le debug
  reloadMission() {
    this.loadMissionDetails();
  }

  getApiStatus(): string {
    return this.error ? 'Erreur API' : 'API OK';
  }
}